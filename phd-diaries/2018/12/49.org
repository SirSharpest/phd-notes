#+TITLE: PhD Diary Week Beginning 3rd December
#+AUTHOR: Nathan Hughes
#+OPTIONS: toc:nil H:4 ^:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage[margin=0.8in]{geometry}
#+LaTeX_HEADER: \usepackage{amssymb,amsmath}
#+LaTeX_HEADER: \usepackage{fancyhdr}
#+LaTeX_HEADER: \pagestyle{fancy}
#+LaTeX_HEADER: \usepackage{lastpage}
#+LaTeX_HEADER: \usepackage{float}
#+LaTeX_HEADER: \restylefloat{figure}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \hypersetup{urlcolor=blue}
#+LaTex_HEADER: \usepackage{titlesec}
#+LaTex_HEADER: \setcounter{secnumdepth}{4}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{frame=single,framesep=10pt}
#+LaTeX_HEADER: \chead{}
#+LaTeX_HEADER: \rhead{\today}
#+LaTeX_HEADER: \cfoot{}
#+LaTeX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LaTeX_HEADER: \usepackage[parfill]{parskip}
#+LaTeX_HEADER:\usepackage{subfig}
#+LaTex_HEADER: \usepackage[round]{natbib}
#+LaTeX_HEADER: \hypersetup{colorlinks=true,linkcolor=black, citecolor=black}
#+LaTeX_HEADER: \usepackage{siunitx}
#+LATEX_HEADER_EXTRA:  \usepackage{framed}
#+LATEX: \maketitle
#+LATEX: \tableofcontents
#+LATEX: \clearpage

* Papers to read [0%]
** TODO Read Regine Kahmann's Papers [0%]
*** TODO Ustilago maydis effectors and their impact on virulence citep:lanverUstilagoMaydisEffectors2017
*** TODO How filamentous plant pathogen effectors are translocated to host cells citep:loprestiHowFilamentousPlant2017
*** TODO A secreted Ustilago maydis effector promotes virulence by targeting anthocyanin biosynthesis in maize citep:tanakaSecretedUstilagoMaydis2014
** TODO Intercellular and systemic trafficking of RNAs citep:liuIntercellularSystemicTrafficking2018

* TODO Re-read Eva's thesis
- Make particular note of the diffusion constants

* DONE Research viscosity of cytosol
  CLOSED: [2018-12-05 Wed 10:47]

- It's similar enough to water that we can safely make that assumption for modelling at this level: citep:bickneseCytoplasmicViscosityCell1993

* TODO Compare chitin movement via apoplast vs. S.A. via symplast
- Look at other potential defence hormones

* DONE Formalise the $H_\theta$
  CLOSED: [2018-12-05 Wed 10:51]
- $H_\theta$ : Apoplastic diffusion of the elicitor chitin can explain defence activation in plant cells

* TODO Show how parameter changes would alter predictions in diffusion models


* TODO Build analytical solution to 1D diffusion [16%]
- [X] Find out what I don't know, so I can begin learning it
- [ ] Read up on ODEs
- [ ] Read up on PDEs
- [ ] Learn how to separate variables of PDE/ODE
- [ ] https://www.youtube.com/watch?v=HKvP2ESjJbA&list=PLwIFHT1FWIUJYuP5y6YEM4WWrY4kEmIuS
- [ ] https://www.youtube.com/watch?v=LYsIBqjQTdI&list=PLF6061160B55B0203

* Salicylic acid activates PDLP5 production
- S.a. -> ++PDLP5 -> PD Callose Deposition -> PD Closure
- citep:wangSalicylicAcidRegulates2013
** TODO Lym2 interactions from Chitin and relationship to PDLP cycle
- cite:faulknerLYM2dependentChitinPerception2013

* 1D diffusion of hormones through cells
** Assumptions
- Cell length $L$ = $50 \mu m$
- Radius of salicylic acid molecule = $\SI{3.65}{\angstrom}$
  - $D \approx 671 \mu m^2/s$
- Plasmodesmata permeability $q = 1\mu m/s$
- *SA Needs a relay in the cells to make distance matter*

#+BEGIN_SRC ipython :exports none :session  :results none :eval never-export
sa_r = 3.65e-10
D = ((1.38e-23 * 298.15)/(6*pi * 8.9e-4 * sa_r))
#+END_SRC

** When would SA overtake Chitin
Assuming no PD slow down, and

#+BEGIN_SRC ipython :exports none :session :results none :eval never-export
  ch_speed = 181 # Assuming single chain
  sa_speed = 671
  results = [ ]

  delay = 60*60
  for t in [60, 60*10, 60*30, 60*60, 60*60*4, 60*60*12, 60*60*24]:

      sa_dist = sa_speed * (t - delay)
      ch_dist = ch_speed * t

      if sa_dist > ch_dist:
          results.append(True)
          continue
      results.append(False)

  for t in range(1, 60*60*24):

      sa_dist = sa_speed * (t - delay)
      ch_dist = ch_speed * t

      if sa_dist >= ch_dist:
          time = t
          dist = sa_dist
          break
#+END_SRC

#+BEGIN_SRC ipython :exports none :session  :ipyfile ./images/transport.png :results none
  import numpy as np
  from numpy import pi
  import matplotlib.pyplot as plt

  def diffuse_2D(nx, ny, dx, dy, nt, D, dt, prevState=None, prevIter=None):
      dx2 = dx**2
      dy2 = dy**2
      u = np.zeros((nx, ny))
      mid_x = int(nx/2)
      mid_y = int(ny/2)

      u = prevState.copy()
      start = prevIter

      for n in range(start, nt):
          un = u.copy()  # Update previous values
          u[1:-1, 1:-1] = un[1:-1, 1:-1] + D * \
              (((un[2:, 1:-1] - 2 * un[1:-1, 1:-1] + un[:-2, 1:-1])/dx2) +
               ((un[1:-1, 2:] - 2 * un[1:-1, 1:-1] + un[1:-1, :-2])/dy2))
      return un


  def diffuse_1D(nx, dx, nt, D, dt, prevState=None, prevIter=None):
      dx2 = dx**2
      u = np.zeros(nx)
      u = prevState.copy()
      start = prevIter

      for n in range(start, nt):
          un = u.copy()  # Update previous values
          u[1:-1] = un[1:-1] + D * (un[0:-2] - 2 * un[1:-1] + un[2:])/dx2
      return un

  # All measurements are given as um
  len_cell = 50
  len_model = len_cell*20

  # Number of x,y positions
  nx = len_model

  # Change in X & Y
  dx, dy = 1, 1
  # Number of timesteps to calculate until
  nt = 6
  # Max time state to reach
  max_t = 60*60*24  # 2*24 hr

  # Diffusion constant in mm2/s

  def diff(x): return ((1.38e-23 * 298.15)/(6*pi * 8.9e-4 * x))

  D = diff(3.65e-10)

  dt = 1  # change in time = 1 second

  nts = [str(nt) for nt in np.linspace(1, 60*60, 6, dtype=int)]# [1, 60, 60*60, 60*60*2, 60*60*4, 60*60*12]]

  # Calc initial state
  prevState = np.zeros(nx)
  production = 1
  # prevState area needs constant inflow of SA
  mid_s = int(nx/2-(0.5*len_cell))
  mid_e = int(nx/2+(0.5*len_cell))
  prevState[mid_s:mid_e] = production
  states = [prevState]

  for idx, n in enumerate(nts):
      if idx is 0:
          continue
      prevIter = int(nts[idx-1])
      prevState[mid_s:mid_e] = prevState[mid_s:mid_e] + production
      prevState = diffuse_1D(nx, dx, int(n), D, dt,
                             prevState=prevState, prevIter=prevIter)
      states.append(prevState)

  fig, axes = plt.subplots(2, 3, sharex=True, sharey=True, dpi=100)

  for idx, d in enumerate(nts):
      axes[idx//3, idx%3].plot(states[idx])

#+END_SRC

#+CAPTION: Transport Model in effect
#+ATTR_LATEX: :width 8cm
[[./images/transport.png]]




\clearpage
bibliography:library.bib
bibliographystyle:plainnat
